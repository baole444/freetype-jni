import de.undercouch.gradle.tasks.download.Download

plugins {
    id 'java-library'
    id 'de.undercouch.download' version '5.6.0'
}



group = 'com.mlomb'
version = '1.0.0'
description = 'Java bindings for the FreeType font rendering library'
def buildDirectory = "${getLayout().getBuildDirectory()}"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

repositories {
    mavenCentral()

    maven {
        url "https://repo.gradle.org/gradle/jvm-ecosystem-repository"
    }
}

dependencies {
    // For testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'

    // For loading native libraries
    implementation 'org.scijava:native-lib-loader:2.4.0'
}

// Testing configuration
test {
    useJUnitPlatform()
}

// FreeType version to use - starting with 2.9.1 for compatibility
def freetypeVersion = '2.9.1'
def freetypeArchiveUrl = "https://download.savannah.gnu.org/releases/freetype/freetype-${freetypeVersion}.tar.gz"
def freetypeSrcDir = "${buildDirectory}/freetype-src"
def freetypeBuildDir = "${buildDirectory}/freetype-build"
def generatedHeadersDir = "${buildDirectory}/generated/jni-headers"

// Define operating systems and architectures to build for
def osArchPairs = [
        ['linux', 'x86_64', '.so'],
        ['windows', 'x86_64', '.dll'],
        ['mac', 'x86_64', '.dylib']
]

tasks.register('downloadFreetype', Download) {
    src freetypeArchiveUrl
    dest "${buildDirectory}/freetype-${freetypeVersion}.tar.gz"
}

tasks.register('extractFreetype', Copy) {
    dependsOn downloadFreetype
    from tarTree(downloadFreetype.dest)
    into "${getLayout().getBuildDirectory()}"
    doLast {
        file("${buildDirectory}/freetype-${freetypeVersion}").renameTo(file(freetypeSrcDir))
    }
}

// Generate JNI headers from Java classes
tasks.register('generateJniHeaders', JavaCompile) {
    source = sourceSets.main.java
    classpath = sourceSets.main.compileClasspath
    destinationDirectory = file("${buildDirectory}/tmp/jni-classes")
    options.compilerArgs = [
            '-h', generatedHeadersDir
    ]
}

// Configure CMAKE for each platform/architecture
osArchPairs.each { platform ->
    def os = platform[0]
    def arch = platform[1]
    def extension = platform[2]
    def taskName = "compileFreeType${os.capitalize()}${arch.capitalize()}"

    tasks.register(taskName, Exec) {
        dependsOn(extractFreetype, generateJniHeaders)  // Fixed: use parentheses instead of square brackets
        def outDir = "${freetypeBuildDir}/${os}-${arch}"

        doFirst {
            mkdir outDir
        }

        workingDir outDir

        // Use appropriate cmake generator based on platform
        def cmakeGen = os == 'windows' ? 'NMake Makefiles' : 'Unix Makefiles'

        // Configure cross-compilation if needed
        def cmakeArgs = [
                'cmake',
                '-DCMAKE_BUILD_TYPE=Release',
                "-DCMAKE_POSITION_INDEPENDENT_CODE=ON",
                "-DBUILD_SHARED_LIBS=OFF",
                "-DCMAKE_C_FLAGS=-fPIC",
                "${freetypeSrcDir}"
        ]

        if (cmakeGen) {
            cmakeArgs.addAll(["-G", cmakeGen])
        }

        // Execute CMAKE
        commandLine cmakeArgs
    }

    tasks.register("buildFreeType${os.capitalize()}${arch.capitalize()}", Exec) {
        dependsOn taskName
        workingDir "${freetypeBuildDir}/${os}-${arch}"
        commandLine 'cmake', '--build', '.', '--config', 'Release'
    }

    tasks.register("buildJni${os.capitalize()}${arch.capitalize()}", Exec) {
        dependsOn "buildFreeType${os.capitalize()}${arch.capitalize()}"
        workingDir "${freetypeBuildDir}/${os}-${arch}"

        // Compile the JNI code
        def compileCmd = []
        if (os == 'windows') {
            compileCmd = ['cl', '/LD',
                          "/I${generatedHeadersDir}",
                          "/I${freetypeSrcDir}/include",
                          "/I${System.getProperty('java.home')}/include",
                          "/I${System.getProperty('java.home')}/include/win32",
                          "${projectDir}/jni/freetype_jni.cpp",
                          "/link", "/LIBPATH:${freetypeBuildDir}/${os}-${arch}/lib",
                          "freetype.lib", "/OUT:freetype-jni${extension}"]
        } else {
            compileCmd = ['c++', '-shared', '-fPIC',
                          "-I${generatedHeadersDir}",
                          "-I${freetypeSrcDir}/include",
                          "-I${System.getProperty('java.home')}/include",
                          "-I${System.getProperty('java.home')}/include/${os == 'mac' ? 'darwin' : os.toLowerCase()}",
                          "-o", "libfreetype-jni${extension}",
                          "${projectDir}/jni/freetype_jni.cpp",
                          "-L${freetypeBuildDir}/${os}-${arch}/lib",
                          "-lfreetype"]
        }

        commandLine compileCmd
    }

    tasks.register("copyJniLib${os.capitalize()}${arch.capitalize()}", Copy) {
        dependsOn "buildJni${os.capitalize()}${arch.capitalize()}"
        from "${freetypeBuildDir}/${os}-${arch}/libfreetype-jni${extension}"
        into "${buildDirectory}/resources/main/native/${os}-${arch}"
    }

    // Add these platform-specific tasks to the main build
    tasks.build.dependsOn "copyJniLib${os.capitalize()}${arch.capitalize()}"
}


// Create a native library loader class
tasks.register('generateNativeLoader') {
    doLast {
        def outputDir = "${buildDir}/generated/sources/java/com/mlomb/freetypejni/internal"
        mkdir outputDir

        def loaderFile = new File("${outputDir}/NativeLoader.java")
        loaderFile.text = """package com.mlomb.freetypejni.internal;

import org.scijava.native_lib_loader.NativeLibraryUtil;

/**
 * Utility class for loading native libraries
 */
public class NativeLoader {
    private static boolean loaded = false;
    
    /**
     * Loads the native library
     */
    public static synchronized void loadLibrary() {
        if (!loaded) {
            NativeLibraryUtil.loadLibrary("freetype-jni");
            loaded = true;
        }
    }
}
"""
    }
}

// Task to generate Gradle wrapper with specific version
tasks.register('createWrapper') {
    description = 'Creates Gradle wrapper files with version 8.13'
    group = 'Build Setup'

    doLast {
        // Execute the Gradle wrapper task programmatically
        tasks.wrapper.configure {
            gradleVersion = '8.13'
            distributionType = Wrapper.DistributionType.ALL
        }
        tasks.wrapper.execute()

        println "Gradle wrapper ${gradleVersion} has been generated"
        println "  - You can now use './gradlew' instead of 'gradle'"
    }
}

// Add a task to verify the toolchain
tasks.register('verifyToolchain') {
    description = 'Verifies that the Java toolchain is properly configured'
    group = 'Build'

    doLast {
        // Get the Java compilation task
        def javaCompileTask = tasks.compileJava

        // Get the toolchain JDK
        def toolchainJdk = javaCompileTask.javaCompiler.orNull?.metadata

        if (toolchainJdk) {
            println "Toolchain configured successfully"
            println "  - Java version: ${toolchainJdk.languageVersion.asInt()}"
            println "  - Vendor: ${toolchainJdk.vendor.toString()}"
        } else {
            println "No toolchain is configured or available"
            println "  - Falling back to: Java ${System.getProperty('java.version')}"
        }
    }
}

// Custom build task that executes the whole build process
tasks.register('fullBuild') {
    description = 'Executes the complete build process including compilation and native library building'
    group = 'Build'

    // This task depends on the standard build task which includes
    // compiling, testing, and creating the jar
    dependsOn tasks.build, tasks.verifyToolchain

    // Make sure verifyToolchain runs before build to show info first
    tasks.build.mustRunAfter tasks.verifyToolchain

    doFirst {
        println "Starting full build process for FreeType JNI"
        println "  - Building with specified Java toolchain"
        println "  - OS: ${System.getProperty('os.name')}"
        println "  - FreeType version: ${freetypeVersion}"
    }

    doLast {
        // Get the output JAR file
        def jarFile = tasks.jar.archiveFile.get().asFile
        def jarSizeKB = jarFile.length() / 1024

        println "Build completed successfully"
        println "  - Output: ${jarFile.name} (${String.format('%.2f', jarSizeKB)} KB)"
        println "  - Native libraries included for: ${osArchPairs.collect { it[0] + '-' + it[1] }.join(', ')}"
        println "  - The library is now ready to use"
    }
}

// Add a task to clean and then build
tasks.register('cleanAndBuild') {
    description = 'Cleans the project and then performs a full build'
    group = 'Build'

    dependsOn tasks.clean, tasks.fullBuild

    // Ensure clean runs before build
    tasks.findByName('fullBuild').mustRunAfter tasks.clean
}

// Configure compile task to show more information
tasks.compileJava.doFirst {
    println "Compiling with toolchain: ${javaCompiler.get().metadata.languageVersion.asInt()}"
}


// Add the generated source to the main source set
sourceSets {
    main {
        java {
            srcDir "${buildDir}/generated/sources/java"
        }
    }
}

compileJava.dependsOn generateNativeLoader